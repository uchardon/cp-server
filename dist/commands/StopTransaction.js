"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StopTransaction = exports.STATUS_CONCURRENTTX = exports.STATUS_INVALID = exports.STATUS_EXPIRED = exports.STATUS_BLOCKED = exports.STATUS_ACCEPTED = exports.UNIT_PERCENT = exports.UNIT_FAHRENHEIT = exports.UNIT_CELCIUS = exports.UNIT_K = exports.UNIT_V = exports.UNIT_A = exports.UNIT_KVAR = exports.UNIT_VAR = exports.UNIT_KVA = exports.UNIT_VA = exports.UNIT_KW = exports.UNIT_W = exports.UNIT_KVARH = exports.UNIT_VARH = exports.UNIT_KWH = exports.UNIT_WH = exports.LOCATION_BODY = exports.LOCATION_OUTLET = exports.LOCATION_INLET = exports.LOCATION_EV = exports.LOCATION_CABLE = exports.PHASE_L3_L1 = exports.PHASE_L2_L3 = exports.PHASE_L1_L2 = exports.PHASE_L3_N = exports.PHASE_L2_N = exports.PHASE_L1_N = exports.PHASE_N = exports.PHASE_L3 = exports.PHASE_L2 = exports.PHASE_L1 = exports.MEASURAND_RPM = exports.MEASURAND_SOC = exports.MEASURAND_TEMPERATURE = exports.MEASURAND_FREQUENCY = exports.MEASURAND_VOLTAGE = exports.MEASURAND_CURRENT_OFFERED = exports.MEASURAND_CURRENT_EXPORT = exports.MEASURAND_CURRENT_IMPORT = exports.MEASURAND_POWER_FACTOR = exports.MEASURAND_POWER_REACTIVE_IMPORT = exports.MEASURAND_POWER_REACTIVE_EXPORT = exports.MEASURAND_POWER_OFFERED = exports.MEASURAND_POWER_ACTIVE_IMPORT = exports.MEASURAND_POWER_ACTIVE_EXPORT = exports.MEASURAND_ENERGY_REACTIVE_IMPORT_INTERVAL = exports.MEASURAND_ENERGY_REACTIVE_EXPORT_INTERVAL = exports.MEASURAND_ENERGY_ACTIVE_IMPORT_INTERVAL = exports.MEASURAND_ENERGY_ACTIVE_EXPORT_INTERVAL = exports.MEASURAND_ENERGY_REACTIVE_IMPORT_REGISTER = exports.MEASURAND_ENERGY_REACTIVE_EXPORT_REGISTER = exports.MEASURAND_ENERGY_ACTIVE_IMPORT_REGISTER = exports.MEASURAND_ENERGY_ACTIVE_EXPORT_REGISTER = exports.FORMAT_SIGNEDDATA = exports.FORMAT_RAW = exports.CONTEXT_OTHER = exports.CONTEXT_TRIGGER = exports.CONTEXT_TRANSACTION_END = exports.CONTEXT_TRANSACTION_BEGIN = exports.CONTEXT_SAMPLE_PERIODIC = exports.CONTEXT_SAMPLE_CLOCK = exports.CONTEXT_INTERRUPTION_END = exports.CONTEXT_INTERRUPTION_BEGIN = exports.CONTEXT_DEAUTHORIZED = exports.REASON_DEAUTHORIZED = exports.REASON_UNLOCKCOMMAND = exports.REASON_SOFTRESET = exports.REASON_REMOTE = exports.REASON_REBOOT = exports.REASON_POWERLOSS = exports.REASON_OTHER = exports.REASON_LOCAL = exports.REASON_HARDRESET = exports.REASON_EVDISCONNECTED = exports.REASON_EMERGENCYSTOP = exports.REASON_ACCEPTED = void 0;

var _BaseCommand = _interopRequireDefault(require("./BaseCommand"));

var _StopTransaction = _interopRequireDefault(require("../../ocpp-1.6-schemas/StopTransaction"));

var _StopTransactionResponse = _interopRequireDefault(require("../../ocpp-1.6-schemas/StopTransactionResponse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const REASON_ACCEPTED = 'Accepted';
exports.REASON_ACCEPTED = REASON_ACCEPTED;
const REASON_EMERGENCYSTOP = 'EmergencyStop';
exports.REASON_EMERGENCYSTOP = REASON_EMERGENCYSTOP;
const REASON_EVDISCONNECTED = 'EVDisconnected';
exports.REASON_EVDISCONNECTED = REASON_EVDISCONNECTED;
const REASON_HARDRESET = 'HardReset';
exports.REASON_HARDRESET = REASON_HARDRESET;
const REASON_LOCAL = 'Local';
exports.REASON_LOCAL = REASON_LOCAL;
const REASON_OTHER = 'Other';
exports.REASON_OTHER = REASON_OTHER;
const REASON_POWERLOSS = 'PowerLoss';
exports.REASON_POWERLOSS = REASON_POWERLOSS;
const REASON_REBOOT = 'Reboot';
exports.REASON_REBOOT = REASON_REBOOT;
const REASON_REMOTE = 'Remote';
exports.REASON_REMOTE = REASON_REMOTE;
const REASON_SOFTRESET = 'SoftReset';
exports.REASON_SOFTRESET = REASON_SOFTRESET;
const REASON_UNLOCKCOMMAND = 'UnlockCommand';
exports.REASON_UNLOCKCOMMAND = REASON_UNLOCKCOMMAND;
const REASON_DEAUTHORIZED = 'DeAuthorized';
exports.REASON_DEAUTHORIZED = REASON_DEAUTHORIZED;
const CONTEXT_DEAUTHORIZED = 'DeAuthorized';
exports.CONTEXT_DEAUTHORIZED = CONTEXT_DEAUTHORIZED;
const CONTEXT_INTERRUPTION_BEGIN = 'Interruption.Begin';
exports.CONTEXT_INTERRUPTION_BEGIN = CONTEXT_INTERRUPTION_BEGIN;
const CONTEXT_INTERRUPTION_END = 'Interruption.End';
exports.CONTEXT_INTERRUPTION_END = CONTEXT_INTERRUPTION_END;
const CONTEXT_SAMPLE_CLOCK = 'Sample.Clock';
exports.CONTEXT_SAMPLE_CLOCK = CONTEXT_SAMPLE_CLOCK;
const CONTEXT_SAMPLE_PERIODIC = 'Sample.Periodic';
exports.CONTEXT_SAMPLE_PERIODIC = CONTEXT_SAMPLE_PERIODIC;
const CONTEXT_TRANSACTION_BEGIN = 'Transaction.Begin';
exports.CONTEXT_TRANSACTION_BEGIN = CONTEXT_TRANSACTION_BEGIN;
const CONTEXT_TRANSACTION_END = 'Transaction.End';
exports.CONTEXT_TRANSACTION_END = CONTEXT_TRANSACTION_END;
const CONTEXT_TRIGGER = 'Trigger';
exports.CONTEXT_TRIGGER = CONTEXT_TRIGGER;
const CONTEXT_OTHER = 'Other';
exports.CONTEXT_OTHER = CONTEXT_OTHER;
const FORMAT_RAW = 'Raw';
exports.FORMAT_RAW = FORMAT_RAW;
const FORMAT_SIGNEDDATA = 'SignedData';
exports.FORMAT_SIGNEDDATA = FORMAT_SIGNEDDATA;
const MEASURAND_ENERGY_ACTIVE_EXPORT_REGISTER = 'Energy.Active.Export.Register';
exports.MEASURAND_ENERGY_ACTIVE_EXPORT_REGISTER = MEASURAND_ENERGY_ACTIVE_EXPORT_REGISTER;
const MEASURAND_ENERGY_ACTIVE_IMPORT_REGISTER = 'Energy.Active.Import.Register';
exports.MEASURAND_ENERGY_ACTIVE_IMPORT_REGISTER = MEASURAND_ENERGY_ACTIVE_IMPORT_REGISTER;
const MEASURAND_ENERGY_REACTIVE_EXPORT_REGISTER = 'Energy.Reactive.Export.Register';
exports.MEASURAND_ENERGY_REACTIVE_EXPORT_REGISTER = MEASURAND_ENERGY_REACTIVE_EXPORT_REGISTER;
const MEASURAND_ENERGY_REACTIVE_IMPORT_REGISTER = 'Energy.Reactive.Import.Register';
exports.MEASURAND_ENERGY_REACTIVE_IMPORT_REGISTER = MEASURAND_ENERGY_REACTIVE_IMPORT_REGISTER;
const MEASURAND_ENERGY_ACTIVE_EXPORT_INTERVAL = 'Energy.Active.Export.Interval';
exports.MEASURAND_ENERGY_ACTIVE_EXPORT_INTERVAL = MEASURAND_ENERGY_ACTIVE_EXPORT_INTERVAL;
const MEASURAND_ENERGY_ACTIVE_IMPORT_INTERVAL = 'Energy.Active.Import.Interval';
exports.MEASURAND_ENERGY_ACTIVE_IMPORT_INTERVAL = MEASURAND_ENERGY_ACTIVE_IMPORT_INTERVAL;
const MEASURAND_ENERGY_REACTIVE_EXPORT_INTERVAL = 'Energy.Reactive.Export.Interval';
exports.MEASURAND_ENERGY_REACTIVE_EXPORT_INTERVAL = MEASURAND_ENERGY_REACTIVE_EXPORT_INTERVAL;
const MEASURAND_ENERGY_REACTIVE_IMPORT_INTERVAL = 'Energy.Reactive.Import.Interval';
exports.MEASURAND_ENERGY_REACTIVE_IMPORT_INTERVAL = MEASURAND_ENERGY_REACTIVE_IMPORT_INTERVAL;
const MEASURAND_POWER_ACTIVE_EXPORT = 'Power.Active.Export';
exports.MEASURAND_POWER_ACTIVE_EXPORT = MEASURAND_POWER_ACTIVE_EXPORT;
const MEASURAND_POWER_ACTIVE_IMPORT = 'Power.Active.Import';
exports.MEASURAND_POWER_ACTIVE_IMPORT = MEASURAND_POWER_ACTIVE_IMPORT;
const MEASURAND_POWER_OFFERED = 'Power.Offered';
exports.MEASURAND_POWER_OFFERED = MEASURAND_POWER_OFFERED;
const MEASURAND_POWER_REACTIVE_EXPORT = 'Power.Reactive.Export';
exports.MEASURAND_POWER_REACTIVE_EXPORT = MEASURAND_POWER_REACTIVE_EXPORT;
const MEASURAND_POWER_REACTIVE_IMPORT = 'Power.Reactive.Import';
exports.MEASURAND_POWER_REACTIVE_IMPORT = MEASURAND_POWER_REACTIVE_IMPORT;
const MEASURAND_POWER_FACTOR = 'Power.Factor';
exports.MEASURAND_POWER_FACTOR = MEASURAND_POWER_FACTOR;
const MEASURAND_CURRENT_IMPORT = 'Current.Import';
exports.MEASURAND_CURRENT_IMPORT = MEASURAND_CURRENT_IMPORT;
const MEASURAND_CURRENT_EXPORT = 'Current.Export';
exports.MEASURAND_CURRENT_EXPORT = MEASURAND_CURRENT_EXPORT;
const MEASURAND_CURRENT_OFFERED = 'Current.Offered';
exports.MEASURAND_CURRENT_OFFERED = MEASURAND_CURRENT_OFFERED;
const MEASURAND_VOLTAGE = 'Voltage';
exports.MEASURAND_VOLTAGE = MEASURAND_VOLTAGE;
const MEASURAND_FREQUENCY = 'Frequency';
exports.MEASURAND_FREQUENCY = MEASURAND_FREQUENCY;
const MEASURAND_TEMPERATURE = 'Temperature';
exports.MEASURAND_TEMPERATURE = MEASURAND_TEMPERATURE;
const MEASURAND_SOC = 'SoC';
exports.MEASURAND_SOC = MEASURAND_SOC;
const MEASURAND_RPM = 'RPM';
exports.MEASURAND_RPM = MEASURAND_RPM;
const PHASE_L1 = 'L1';
exports.PHASE_L1 = PHASE_L1;
const PHASE_L2 = 'L2';
exports.PHASE_L2 = PHASE_L2;
const PHASE_L3 = 'L3';
exports.PHASE_L3 = PHASE_L3;
const PHASE_N = 'N';
exports.PHASE_N = PHASE_N;
const PHASE_L1_N = 'L1-N';
exports.PHASE_L1_N = PHASE_L1_N;
const PHASE_L2_N = 'L2-N';
exports.PHASE_L2_N = PHASE_L2_N;
const PHASE_L3_N = 'L3-N';
exports.PHASE_L3_N = PHASE_L3_N;
const PHASE_L1_L2 = 'L1-L2';
exports.PHASE_L1_L2 = PHASE_L1_L2;
const PHASE_L2_L3 = 'L2-L3';
exports.PHASE_L2_L3 = PHASE_L2_L3;
const PHASE_L3_L1 = 'L3-L1';
exports.PHASE_L3_L1 = PHASE_L3_L1;
const LOCATION_CABLE = 'Cable';
exports.LOCATION_CABLE = LOCATION_CABLE;
const LOCATION_EV = 'EV';
exports.LOCATION_EV = LOCATION_EV;
const LOCATION_INLET = 'Inlet';
exports.LOCATION_INLET = LOCATION_INLET;
const LOCATION_OUTLET = 'Outlet';
exports.LOCATION_OUTLET = LOCATION_OUTLET;
const LOCATION_BODY = 'Body';
exports.LOCATION_BODY = LOCATION_BODY;
const UNIT_WH = 'Wh';
exports.UNIT_WH = UNIT_WH;
const UNIT_KWH = 'kWh';
exports.UNIT_KWH = UNIT_KWH;
const UNIT_VARH = 'varh';
exports.UNIT_VARH = UNIT_VARH;
const UNIT_KVARH = 'kvarh';
exports.UNIT_KVARH = UNIT_KVARH;
const UNIT_W = 'W';
exports.UNIT_W = UNIT_W;
const UNIT_KW = 'kW';
exports.UNIT_KW = UNIT_KW;
const UNIT_VA = 'VA';
exports.UNIT_VA = UNIT_VA;
const UNIT_KVA = 'kVA';
exports.UNIT_KVA = UNIT_KVA;
const UNIT_VAR = 'var';
exports.UNIT_VAR = UNIT_VAR;
const UNIT_KVAR = 'kvar';
exports.UNIT_KVAR = UNIT_KVAR;
const UNIT_A = 'A';
exports.UNIT_A = UNIT_A;
const UNIT_V = 'V';
exports.UNIT_V = UNIT_V;
const UNIT_K = 'K';
exports.UNIT_K = UNIT_K;
const UNIT_CELCIUS = 'Celcius';
exports.UNIT_CELCIUS = UNIT_CELCIUS;
const UNIT_FAHRENHEIT = 'Fahrenheit';
exports.UNIT_FAHRENHEIT = UNIT_FAHRENHEIT;
const UNIT_PERCENT = 'Percent';
exports.UNIT_PERCENT = UNIT_PERCENT;
const STATUS_ACCEPTED = 'Accepted';
exports.STATUS_ACCEPTED = STATUS_ACCEPTED;
const STATUS_BLOCKED = 'Blocked';
exports.STATUS_BLOCKED = STATUS_BLOCKED;
const STATUS_EXPIRED = 'Expired';
exports.STATUS_EXPIRED = STATUS_EXPIRED;
const STATUS_INVALID = 'Invalid';
exports.STATUS_INVALID = STATUS_INVALID;
const STATUS_CONCURRENTTX = 'ConcurrentTx';
exports.STATUS_CONCURRENTTX = STATUS_CONCURRENTTX;

class StopTransaction extends _BaseCommand.default {
  constructor(values) {
    super(_StopTransaction.default, _StopTransactionResponse.default, values);
  }

}

exports.StopTransaction = StopTransaction;